local LOG_FILE = "ShashlikEx/http_spy_logs.txt"

local function SafeWrite(content)
    local success, write = pcall(function()
        if writefile and readfile then
            if not pcall(readfile, LOG_FILE) then
                writefile(LOG_FILE, "=== HTTP LOG START ===\n\n")
            end
            appendfile(LOG_FILE, content.."\n")
        end
    end)
    if not success then
        rawset(_G, "http_spy_log", (rawget(_G, "http_spy_log") or "") .. content .. "\n")
    end
end

local function LogFullRequest(req_type, url, data)
    local timestamp = os.date("[%H:%M:%S]")
    local entry = string.format("%s [%s] %s", timestamp, req_type, url or "nil")
    
    if data then
        local data_str = type(data) == "table" and pcall(function() return game:GetService("HttpService"):JSONEncode(data) end) 
            and data or tostring(data)
        entry = entry .. "\n" .. string.format("DATA: %s", data_str)
    end
    
    SafeWrite(entry)
end

local function HookFunction(original, hook, method_name)
    local mt = getrawmetatable(original) or {}
    local new_func = function(...)
        hook(...)
        if mt.__call then
            return mt.__call(original, ...)
        end
        return original(...)
    end
    
    if mt.__index or mt.__newindex then
        setrawmetatable(original, {
            __call = new_func,
            __index = mt.__index,
            __newindex = mt.__newindex
        })
    else
        return new_func
    end
    return new_func
end

local original_loadstring = loadstring
loadstring = HookFunction(original_loadstring, function(code, ...)
    if type(code) == "string" then
        for full_url in code:gmatch("(https?://[%S]+)") do
            LogFullRequest("LOADSTRING", full_url)
        end
    end
end, "loadstring")

-- HttpGet
local original_httpget = game.HttpGet
game.HttpGet = HookFunction(original_httpget, function(self, url, ...)
    LogFullRequest("HTTP-GET", url)
end, "HttpGet")

-- HttpPost
local original_httppost = game.HttpPost
game.HttpPost = HookFunction(original_httppost, function(self, url, data, ...)
    LogFullRequest("HTTP-POST", url, data)
end, "HttpPost")

-- HttpService
local http_service = game:GetService("HttpService")
local original_getasync = http_service.GetAsync
http_service.GetAsync = HookFunction(original_getasync, function(self, url, ...)
    LogFullRequest("HTTPSERVICE-GET", url)
end, "GetAsync")

local original_postasync = http_service.PostAsync
http_service.PostAsync = HookFunction(original_postasync, function(self, url, data, ...)
    LogFullRequest("HTTPSERVICE-POST", url, data)
end, "PostAsync")

if syn and syn.request then
    local original_synrequest = syn.request
    syn.request = HookFunction(original_synrequest, function(args)
        local method = args.Method or "GET"
        LogFullRequest("SYN-"..method, args.Url, args.Body)
    end, "syn.request")
end

local function DeepHook(obj, method, hook_func)
    local original = rawget(obj, method)
    if original then
        rawset(obj, method, HookFunction(original, hook_func, method))
    end
end

DeepHook(game, "HttpGet", function(self, url, ...) LogFullRequest("DEEP-HTTP-GET", url) end)
DeepHook(http_service, "GetAsync", function(self, url, ...) LogFullRequest("DEEP-HTTPSERVICE-GET", url) end)

if rconsoleprint then rconsoleprint = function() end end
print = function() end
warn = function() end